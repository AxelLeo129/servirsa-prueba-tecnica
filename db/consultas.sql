-- Projects Table
CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    code VARCHAR(10) UNIQUE NOT NULL, -- Autogenerated format: P-0001, P-0002...
    name VARCHAR(255) NOT NULL,
    municipality VARCHAR(100) NOT NULL,
    department VARCHAR(100) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
);

-- Budget Items Table
CREATE TABLE budget_items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    project_id INT NOT NULL,
    UNIQUE (name, project_id), -- Restriction: unique name within the same project
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- Donations Table
CREATE TABLE donations (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    donor VARCHAR(255) NOT NULL,
    amount DECIMAL(10,2) NOT NULL CHECK (amount > 0),
    budget_item_id INT NOT NULL,
    project_id INT NOT NULL,
    FOREIGN KEY (budget_item_id) REFERENCES budget_items(id) ON DELETE CASCADE,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- Purchase Orders Table
CREATE TABLE purchase_orders (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    supplier VARCHAR(255) NOT NULL,
    amount DECIMAL(10,2) NOT NULL CHECK (amount > 0),
    budget_item_id INT NOT NULL,
    project_id INT NOT NULL,
    FOREIGN KEY (budget_item_id) REFERENCES budget_items(id) ON DELETE CASCADE,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- (a) El porcentaje de ejecución de fondos para cada proyecto registrado. La ejecución se calcula como el monto total ejecutado (gastado) dentro del total de fondos recibidos por medio de donaciones.
SELECT 
    p.id AS project_id,
    p.code AS project_code,
    p.name AS project_name,
    COALESCE(SUM(d.amount), 0) AS total_received,
    COALESCE(SUM(po.amount), 0) AS total_spent,
    CASE 
        WHEN COALESCE(SUM(d.amount), 0) = 0 THEN 0
        ELSE ROUND((COALESCE(SUM(po.amount), 0) / COALESCE(SUM(d.amount), 1)) * 100, 2)
    END AS execution_percentage
FROM projects p
LEFT JOIN donations d ON p.id = d.project_id
LEFT JOIN purchase_orders po ON p.id = po.project_id
GROUP BY p.id, p.code, p.name
ORDER BY p.id;

-- (b) La disponibilidad de fondos en cada rubro del proyecto “X”, de modo que se muestren todos los rubros del proyecto (incluyendo los que pueden no tener ninguna donación recibida o ninguna orden de compra emitida)
SELECT 
    bi.id AS budget_item_id,
    bi.name AS budget_item_name,
    COALESCE(SUM(d.amount), 0) AS total_received,
    COALESCE(SUM(po.amount), 0) AS total_spent,
    (COALESCE(SUM(d.amount), 0) - COALESCE(SUM(po.amount), 0)) AS available_funds
FROM budget_items bi
LEFT JOIN donations d ON bi.id = d.budget_item_id AND d.project_id = (SELECT id FROM projects WHERE name = 'X')
LEFT JOIN purchase_orders po ON bi.id = po.budget_item_id AND po.project_id = (SELECT id FROM projects WHERE name = 'X')
WHERE bi.project_id = (SELECT id FROM projects WHERE name = 'Rural Education')
GROUP BY bi.id, bi.name
ORDER BY bi.id;
